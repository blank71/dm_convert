{%- import 'tf_macros.jinja' as macros %}
{%- set properties = resource.get('properties', {}) -%}
{%- set resource_name = resource.get('name') -%}
{%- set import_resource = [macros.import_project(properties['project']), properties['region'], resource_name] | join("/") -%}
#tfimport-terraform import google_compute_subnetwork.{{ macros.get_name(resource, properties) }} {{ import_resource }}
resource "google_compute_subnetwork" "{{ macros.get_name(resource, properties) }}" {
  {{- macros.write_provider() }}
  name = "{{ resource_name }}"
  {{- macros.fields(properties, {
    'description': 'description',
    'ipCidrRange': 'ip_cidr_range',
    'region': 'region',
    'privateIpGoogleAccess': 'private_ip_google_access',
    'secondaryIpRange': 'secondary_ip_range',
    'privateIpv6GoogleAccess': 'private_ipv6_google_access',
    'ipv6AccessType': 'ipv6_access_type',
    'stackType': 'stack_type',
    'purpose': 'purpose',
    'role': 'role',
    'project': 'project',
    'sendSecondaryIpRangeIfEmpty': 'send_secondary_ip_range_if_empty',
    'externalIpv6Prefix': 'external_ipv6_prefix',
  }, ' ' * 2) }}
  {%- if 'network' in properties %}
  {%- set network = resource['properties']['network'] %}
  {%- if network == "global/networks/default" %}
  network = "default"
  {%- else %}
  {{ 'network = ' + macros.normalize(network) }}
  {%- endif %}
  {%- endif %}
  {%- set secondary_ip_ranges = resource['properties']['secondaryIpRanges'] %}
  {{- macros.lists(properties, {
    'secondaryIpRanges': {
      'list_name': 'secondary_ip_range',
      'ipCidrRange': 'ip_cidr_range',
      'rangeName': 'range_name',
    }
  }, ' ' * 2) }}
  {%- if 'logConfig' in properties
        and 'enable' in resource['properties']['logConfig']
        and resource['properties']['logConfig']['enable'] %}
    {{- macros.fields(properties, {
      'logConfig': {
        'map_name': 'log_config',
        'aggregationInterval': 'aggregation_interval',
        'flowSampling': 'flow_sampling',
        'metadata': 'metadata',
        'filterExpr': 'filter_expr',
        'metadataFields': 'metadata_fields',
      }
    }, ' ' * 4) }}
  {%- endif %}
  {{- macros.format_dependencies(resource) | indent(2) }}
}
{{- macros.convert_access_control("google_compute_subnetwork", macros.get_name(resource, properties), resource.get('accessControl', {}), import_resource) }}

{%- set unconvertible_fields = resource | match_missing_fields([
  'properties.fingerprint',
  'properties.enableFlowLogs',
  'properties.externalIpv6Prefix',
  ]) %}
