{%- import 'tf_macros.jinja' as macros %}
{%- set properties = resource.get('properties', {}) %}
{%- set resource_name = resource.get('name') %}
#tfimport-terraform import google_compute_region_autoscaler.{{ macros.get_name(resource, properties) }}  __project__/{{ properties['region'] }}/{{ resource_name }}
resource "google_compute_region_autoscaler" "{{ macros.get_name(resource, properties) }}" {
  {{- macros.write_provider() }}
  name = "{{ resource_name }}"
  {{- macros.fields(properties, {
    'name': 'name',
    'description': 'description',
    'target': 'target',
    'region': 'region',
    'project': 'project',
  }, ' ' * 2) }}

  {%- if 'autoscalingPolicy' in properties %}
  {%- set autoscalingPolicy = properties['autoscalingPolicy'] %}
  autoscaling_policy {
    {{- macros.fields(autoscalingPolicy, {
      'minNumReplicas': 'min_replicas',
      'maxNumReplicas': 'max_replicas',
      'mode': 'mode',
    }, ' ' * 3) }}

    {{- macros.dict(autoscalingPolicy, {
      'scaleInControl': {
        'dict_name': 'scale_in_control',
        'maxScaledInReplicas': {
          'dict_name': 'max_scaled_in_replicas',
          'fixed': 'fixed',
          'percent': 'percent'
        },
        'timeWindowSec': 'time_window_sec'
      },
      'coolDownPeriodSec': 'cooldown_period',
      'cpuUtilization': {
        'dict_name': 'cpu_utilization',
        'utilizationTarget': 'target',
        'predictiveMethod': 'predictive_method'
      },
      'loadBalancingUtilization': {
        'dict_name': 'load_balancing_utilization',
        'utilizationTarget': 'target'
      },
      'scalingSchedules': {
        'dict_name': 'scaling_schedules',
      }
    }) | indent(4) }}

    {{- macros.unroll_dict(autoscalingPolicy.get('customMetricUtilizations'), 'metric', {
      'metric': 'name',
      'filter': 'filter',
      'utilizationTargetType': 'type',
      'utilizationTarget': 'target',
      'singleInstanceAssignment': 'single_instance_assignment'
    }) | indent(4) }}

    {{- macros.unroll_dict(autoscalingPolicy.get('scalingSchedules'), 'scaling_schedules', {
      'minRequiredReplicas': 'min_required_replicas',
      'schedule': 'schedule',
      'timeZone': 'time_zone',
      'durationSec': 'duration_sec',
      'disabled': 'disabled',
      'description': 'description'
    }) | indent(4) }}
  }
  {%- endif %}

  {{- macros.format_dependencies(resource) | indent(2) }}
}

{#-
1. [DM] autoscalingPolicy.scaleInControl.maxScaledInReplicas.calculated not found in TF
2. [TF] autoscaling_policy.scaling_schedules has project and region properties, how to map?
#}
